/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package AdminGUI;

import LocalDB.Store;
import javax.persistence.EntityManager;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import supermarket.*;

/**
 *
 * @author Panagis
 */
public class ManageStoresPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageStoresPanel
     */
    private final SuperMarketParentFrame frame;
    private Store store;
    private EntityManager loc;
    private Boolean tableChanged = false;
    private String oldValue;
    private String newValue;
    private Integer row;
    private Integer column;
    private Object[][] stores;
    private String[] columnNames = {"Όνομα","Διεύθυνση"};
    private DefaultTableModel model = new DefaultTableModel(stores,columnNames);
    private Boolean existsEmptyRow = false;
    
    public ManageStoresPanel(SuperMarketParentFrame frame) {
        this.loc = frame.getLoc();
        this.frame = frame;
        initComponents();
        if (!loc.getTransaction().isActive()) {
            loc.getTransaction().begin();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SuperMarket-local-PU").createEntityManager();
        storeQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM Store s");
        storeList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : storeQuery.getResultList();
        ReturnButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        StoreTable = new javax.swing.JTable();
        SaveButton = new javax.swing.JButton();
        AddRow = new javax.swing.JButton();
        RemoveRow = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Διαχείριση Καταστημάτων"));

        ReturnButton.setText("Επιστροφή");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        populateTable();
        StoreTable.setModel(model);
        StoreTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                StoreTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(StoreTable);

        SaveButton.setText("Αποθήκευση");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        AddRow.setText("+");
        AddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRowActionPerformed(evt);
            }
        });

        RemoveRow.setText("-");
        RemoveRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveRowActionPerformed(evt);
            }
        });

        EditButton.setText("Επεξεργασία");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ReturnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AddRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RemoveRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AddRow, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoveRow, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReturnButton)
                    .addComponent(SaveButton)
                    .addComponent(EditButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

 
    private void populateTable(){
        for (Store st : storeList) {
            model.addRow(new Object[]{st.getName(),st.getAddress(),st.getStoreId()});
        }
         StoreTable.setModel(model);
        for (int i=0 ; i < StoreTable.getRowCount(); i++) {
            for (int j = 0; j < StoreTable.getColumnCount(); j++) {
               //StoreTable.setEnabled(false);
            }
        }
    }
    
    private boolean validateStore(){
        return true;
    }
    
    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnButtonActionPerformed
        frame.pnl = new MainPanel(frame);
        frame.addPanelInMain();
    }//GEN-LAST:event_ReturnButtonActionPerformed

    private void AddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRowActionPerformed
        if (!existsEmptyRow) {
            existsEmptyRow = true;

            model = (DefaultTableModel)StoreTable.getModel();
            model.addRow(new Object[]{"","",""});
            StoreTable.setModel(model);
        }
    }//GEN-LAST:event_AddRowActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        if (tableChanged) {
            Object[] options = {"Ναι","Οχι"};
            Integer choice = JOptionPane.showOptionDialog(null,
            "Επιβεβαίωση αλλαγών;",
            null,
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]);

            if (choice == JOptionPane.YES_OPTION){
                if (loc.getTransaction().isActive()) {
                    try {
                        loc.getTransaction().commit();
                        frame.pnl = new MainPanel(frame);
                        frame.addPanelInMain();                    
                    } catch (Exception e) {
                            e.printStackTrace();
                        loc.getTransaction().rollback();            
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Δεν υπάρχουν αλλαγές...");
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void StoreTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_StoreTablePropertyChange
        if ("tableCellEditor".equals(evt.getPropertyName())) {
            row = StoreTable.getSelectedRow();
            column = StoreTable.getSelectedColumn();
            if (StoreTable.isEditing()) {
                oldValue = StoreTable.getValueAt(row, column).toString();
            } else {
                newValue = StoreTable.getValueAt(row, column).toString();
                if (!oldValue.equals(newValue)) {
                    tableChanged = true;
                    store = storeList.get(StoreTable.convertRowIndexToModel(row));
                    loc.merge(store);
                }
            }
        }
    }//GEN-LAST:event_StoreTablePropertyChange

    private void RemoveRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveRowActionPerformed
        if (StoreTable.getSelectedRowCount() != -1) {
            tableChanged = true;
            for (Integer i : StoreTable.getSelectedRows()) {
                store = storeList.get(StoreTable.convertRowIndexToModel(i));
                loc.remove(store);
            }
        }
    }//GEN-LAST:event_RemoveRowActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        row = StoreTable.getSelectedRow();
        JOptionPane.showMessageDialog(null,model.getValueAt(row, 2).toString());
//        store = new Store(  ,
//                            model.getValueAt(row, 0).toString(),
//                            model.getValueAt(row, 1).toString());
//        JOptionPane.showMessageDialog(null, store.getName());
    }//GEN-LAST:event_EditButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddRow;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton RemoveRow;
    private javax.swing.JButton ReturnButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTable StoreTable;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JScrollPane jScrollPane1;
    private java.util.List<LocalDB.Store> storeList;
    private javax.persistence.Query storeQuery;
    // End of variables declaration//GEN-END:variables
}
